# Python CircleCI 2.1 configuration file
# Circle docs https://circleci.com/docs/2.0/language-python/
# Set deployment variables in CircleCI as environment variables

version: 2.1

# Snippet for installing CloudFoundry CLI version 7
install-cf7: &install-cf7
  run:
    name: Install CF7
    command: |
      curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
      sudo dpkg -i cf7.deb
      rm cf7.deb
      cf7 api https://api.fr.cloud.gov

install-python-dependencies: &install-python-dependencies
  run:
    name: Install python dependencies
    command: |
      pip install -U pip
      pip install pipenv
      pipenv install

install-python-dev-dependencies: &install-python-dev-dependencies
  run:
    name: Install python dev dependencies
    command: |
      pip install -U pip
      pip install pipenv
      pipenv install --dev
      pipenv run python -m playwright install

jobs:
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/cimg/python/
      - image: cimg/python:3.9.12-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/_/postgres
      - image: postgres:11.14-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      # Removing chache for now, we either need to build our image or move the cache location
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - node-v4-{{ .Branch }}-{{ checksum "package-lock.json" }}
      #      - node-v4-{{ .Branch }}-
      #      - node-v4-
      - run:
          name: Install gettext
          command: sudo apt-get update && sudo apt-get install -yqq gettext
      - run:
          name: Node install, generate CSS
          command: |
            npm ci
            npm run build
      - save_cache:
          paths:
            - /home/circleci/code/node_modules/
          key: node-v4-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
            - pip-packages-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      #      - pip-packages-v4-{{ .Branch }}-
      #      - pip-packages-v4-
      - *install-python-dev-dependencies
      - run:
          name: Migrate the database
          command: pipenv run crt_portal/manage.py migrate
      - save_cache:
          paths:
            - /home/circleci/code/.venv # this path depends on where pipenv creates a virtualenv
          key: pip-packages-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Run prettier code formatting check
          command: npm run lint:check
      - run:
          name: Run unit tests & check coverage
          command: |
            pipenv run coverage run --source='crt_portal' crt_portal/manage.py test --settings=crt_portal.test_settings cts_forms
            pipenv run coverage report --fail-under=85 -m
      - run:
          name: Run bandit (Python security) tests
          command: |
            pipenv run bandit -r crt_portal/ --exclude cts_forms/tests
      - run:
          name: Run flake8 test for Python code style
          command: |
            pipenv run flake8
      - run:
          name: add or update response templates
          command: |
            pipenv run crt_portal/manage.py update_response_templates
      - run:
          name: compile messages for internationalization
          command: |
            pipenv run crt_portal/manage.py compilemessages
      - run:
          name: run server for tests
          environment:
            DEBUG: true
          command: |
            # create pa11y_tester
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_user('pa11y_tester', 'admin@myproject.com', '$PA11Y_PASSWORD')" | pipenv run crt_portal/manage.py shell
            # runserver
            pipenv run crt_portal/manage.py runserver 8000
          background: true
      - run:
          name: Run pa11y-ci accessibility check
          command: |
            curl --retry-delay 5 --retry 10 --retry-connrefused http://127.0.0.1:8000
            npm run test:a11y-without-report
      - store_artifacts:
          path: ./pa11y-screenshots
      - run:
          name: E2E tests
          command: pipenv run pytest crt_portal/cts_forms/tests/integration/*.py --base-url=http://127.0.0.1:8000

  e2e-test-dev:
    description: Runs E2E tests against dev
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/cimg/python/
      - image: cimg/python:3.9.12-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - *install-python-dev-dependencies
      - run:
          name: E2E tests
          command: pipenv run pytest crt_portal/cts_forms/tests/integration/*.py --base-url=https://crt-portal-django-dev.app.cloud.gov

  e2e-test-stage:
    description: Runs E2E tests against stage
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/cimg/python/
      - image: cimg/python:3.9.12-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - *install-python-dev-dependencies
      - run:
          name: E2E tests
          command: pipenv run pytest crt_portal/cts_forms/tests/integration/*.py --base-url=https://crt-portal-django-stage.app.cloud.gov

# owasp scans on live sties
  owasp-scan-dev:
    machine:
      image: ubuntu-2004:202201-02
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable:latest zap-baseline.py \
              -t https://crt-portal-django-dev.app.cloud.gov/report/ -c .circleci/zap.conf --autooff -z "-config rules.cookie.ignorelist=django_language"
  owasp-scan-stage:
    machine:
      image: ubuntu-2004:202201-02
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable:latest zap-baseline.py \
              -t https://crt-portal-django-stage.app.cloud.gov/report/ -c .circleci/zap.conf --autooff -z "-config rules.cookie.ignorelist=django_language"
  owasp-scan-prod:
    machine:
      image: ubuntu-2004:202201-02
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable:latest zap-baseline.py \
              -t https://civilrights.justice.gov/report/ -c .circleci/zap.conf --autooff -z "-config rules.cookie.ignorelist=django_language"
# deployments
  deploy-dev:
    working_directory: ~/code
    docker:
      # standard docker python image
      - image: python:3.9.12
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          CF_MANIFEST: manifest_dev.yaml
          CF_SPACE: dev
      # CircleCI PostgreSQL images available at: https://hub.docker.com/_/postgres
      - image: postgres:11.14-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      # removing as we deal with caching problem
      # - restore_cache:
      # # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      #     key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            echo "deb https://deb.nodesource.com/node_14.x buster main" > /etc/apt/sources.list.d/nodesource.list && \
            wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
            apt-get update && \
            apt-get install -yqq nodejs && \
            npm i -g npm@8.5.5 && \
            rm -rf /var/lib/apt/lists/*
            npm ci
            npm run build
      # database will be migrated in cloud.gov
      - *install-python-dependencies
      - run:
          name: install cf7
          command: |
            curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
            dpkg -i cf7.deb
            rm cf7.deb
            cf7 api https://api.fr.cloud.gov
      # - save_cache: # cache Python and Node dependencies using checksum of Pipfile and package.json as the cache-key
      #     key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      #     paths:
      #       - ".venv"
      #       - "/usr/local/bin"
      #       - "/usr/local/lib/python3.8/site-packages"
      - run:
          name: Login to cloud.gov
          command: cf7 login -u ${CRT_USERNAME_DEV} -p ${CRT_PASSWORD_DEV} -o doj-crtportal -s ${CF_SPACE}
      - run:
          name: Deploy clamav-rest to dev
          command: cf7 push clamav-rest --strategy rolling -f ${CF_MANIFEST}
      - run:
          name: Deploy crt-portal-django to dev
          command: cf7 push crt-portal-django --strategy rolling -f ${CF_MANIFEST}

  deploy-stage:
    working_directory: ~/code
    docker:
      - image: python:3.9.12
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          CF_MANIFEST: manifest_staging.yaml
          CF_SPACE: staging
      # CircleCI PostgreSQL images available at: https://hub.docker.com/_/postgres
      - image: postgres:11.14-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            echo "deb https://deb.nodesource.com/node_14.x buster main" > /etc/apt/sources.list.d/nodesource.list && \
            wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
            apt-get update && \
            apt-get install -yqq nodejs && \
            npm i -g npm@8.5.5 && \
            rm -rf /var/lib/apt/lists/*
            npm ci
            npm run build
      # database will be migrated in cloud.gov
      - *install-python-dependencies
      - run:
          name: install cf7
          command: |
            curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
            dpkg -i cf7.deb
            rm cf7.deb
            cf7 api https://api.fr.cloud.gov
      - save_cache: # cache Python and Node dependencies using checksum of Pipfile and package.json as the cache-key
          key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.9/site-packages"
      - run:
          name: Login to cloud.gov
          command: cf7 login -u ${CRT_USERNAME_STAGE} -p ${CRT_PASSWORD_STAGE} -o doj-crtportal -s ${CF_SPACE}
      - run:
          name: Deploy clamav-rest to staging
          command: cf7 push clamav-rest --strategy rolling -f ${CF_MANIFEST}
      - run:
          name: Deploy crt-portal-django to staging
          command: cf7 push crt-portal-django --strategy rolling -f ${CF_MANIFEST}

  deploy-prod:
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/cimg/python/
      - image: python:3.9.12
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          CF_MANIFEST: manifest_prod.yaml
          CF_SPACE: prod
      # CircleCI PostgreSQL images available at: https://hub.docker.com/_/postgres
      - image: postgres:11.14-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            echo "deb https://deb.nodesource.com/node_14.x buster main" > /etc/apt/sources.list.d/nodesource.list && \
            wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
            apt-get update && \
            apt-get install -yqq nodejs && \
            npm i -g npm@8.5.5 && \
            rm -rf /var/lib/apt/lists/*
            npm ci
            npm run build
      # database will be migrated in cloud.gov
      - *install-python-dependencies
      - run:
          name: install cf7
          command: |
            curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
            dpkg -i cf7.deb
            rm cf7.deb
            cf7 api https://api.fr.cloud.gov
      - save_cache: # cache Python and Node dependencies using checksum of Pipfile and package.json as the cache-key
          key: deps-v4-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.9/site-packages"
      - run:
          name: Login to cloud.gov
          command: cf7 login -u ${CRT_USERNAME_PROD} -p ${CRT_PASSWORD_PROD} -o doj-crtportal -s ${CF_SPACE}
      - run:
          name: Deploy clamav-rest to production
          command: cf7 push clamav-rest --strategy rolling -f ${CF_MANIFEST}
      - run:
          name: Deploy crt-portal-django to production
          command: cf7 push crt-portal-django --strategy rolling -f ${CF_MANIFEST}

  prod-maintenance-tasks:
    docker:
      # Use CircleCI convenience base image since we only need
      # CloudFoundry CLI
      - image: cimg/base:2020.01
        environment:
          - CF_SPACE: prod
    steps:
      # Install cloud foundry tools
      - *install-cf7
      # login into cloud.gov prod space
      - run:
          name: Login to cloud.gov Production
          command: cf login -u ${CRT_USERNAME_PROD} -p ${CRT_PASSWORD_PROD} -o doj-crtportal -s ${CF_SPACE}
      # Refresh the trend view in prod
      - run:
          name: Refresh trends view
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py refresh_trends" --name refresh-trends
      # Clear expired sessions in staging session table
      - run:
          name: clearsessions management command
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py clearsessions" --name clear-sessions

  staging-maintenance-tasks:
    docker:
      # Use CircleCI convenience base image since we only need
      # CloudFoundry CLI
      - image: cimg/base:2020.01
        environment:
          - CF_SPACE: staging
    steps:
      # Install cloud foundry tools
      - *install-cf7
      # login to Staging Cloud.gov space
      - run:
          name: Login to cloud.gov Staging
          command: cf login -u ${CRT_USERNAME_STAGE} -p ${CRT_PASSWORD_STAGE} -o doj-crtportal -s ${CF_SPACE}
      # Refresh the form letters sent view in staging
      - run:
          name: Refresh form letters sent view
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py refresh_form_letters_sent_view" --name refresh-form-letters-sent-view
      # Refresh the trend view in staging
      - run:
          name: Refresh trends view
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py refresh_trends" --name refresh-trends
      # Clear expired sessions in staging session table
      - run:
          name: clearsessions management command
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py clearsessions" --name clear-sessions

  dev-maintenance-tasks:
    docker:
      # Use CircleCI convenience base image since we only need
      # CloudFoundry CLI
      - image: cimg/base:2020.01
        environment:
          - CF_SPACE: dev
    steps:
      # Install cloud foundry tools
      - *install-cf7
      # login to Cloud.gov dev space
      - run:
          name: Login to cloud.gov Dev
          command: cf login -u ${CRT_USERNAME_DEV} -p ${CRT_PASSWORD_DEV} -o doj-crtportal -s ${CF_SPACE}
      # Refresh the form letters sent view in dev
      - run:
          name: Refresh form letters sent view
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py refresh_form_letters_sent_view" --name refresh-form-letters-sent-view      
      # Refresh the trend view in dev
      - run:
          name: Refresh trends view
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py refresh_trends" --name refresh-trends
      # Clear expired sessions in staging session table
      - run:
          name: clearsessions management command
          command: cf run-task crt-portal-django  -c "python crt_portal/manage.py clearsessions" --name clear-sessions

workflows:
  build-test-deploy:
    jobs:
      - build_and_test

      - owasp-scan-dev:
          filters:
            branches:
              only: /^release.*/

      - owasp-scan-stage:
          filters:
            branches:
              only: master

      - owasp-scan-prod:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master

      - deploy-dev:
          requires:
            - build_and_test
          filters:
            branches:
              only: develop

      - deploy-stage:
          requires:
            - owasp-scan-dev
            - build_and_test
          filters:
            branches:
              only: /^release.*/

      - deploy-prod:
          requires:
            - owasp-scan-stage
            - build_and_test
          filters:
            branches:
              only: master

      - e2e-test-dev:
          requires:
            - deploy-dev
          filters:
            branches:
              only: develop

      - e2e-test-stage:
          requires:
            - deploy-stage
          filters:
            branches:
              only: /^release.*/

  # Scheduled maintenance jobs for portal
  # Dev scheduled jobs
  periodic-tasks-dev:
    jobs:
      - dev-maintenance-tasks #run on dev
    triggers:
      - schedule:
          cron: "0 0 * * *" # run past 8pm every night EST
          filters:
            branches:
              only: develop

  # Staging scheduled jobs
  periodic-tasks-staging:
    jobs:
      - staging-maintenance-tasks #run on stage
    triggers:
      - schedule:
          cron: "0 4 * * *" # run past midnight every night EST
          filters:
            branches:
              only: /^release.*/

  # prod scheduled jobs
  periodic-tasks-prod:
    jobs:
      - prod-maintenance-tasks #run on prod
    triggers:
      - schedule:
          cron: "0 4 * * *" # run past midnight every night EST
          filters:
            branches:
              only: master
