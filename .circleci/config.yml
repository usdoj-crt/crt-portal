# Python CircleCI 2.0 configuration file
# Circle docs https://circleci.com/docs/2.0/language-python/
# Set deployment variables in CircleCI as environment variables
cf-docker-image: &CF_DOCKER_IMAGE
  docker:
    - image: 18fgsa/cloud-foundry-cli
      environment:
        - TZ=America/New_York
        - CF_API: https://api.fr.cloud.gov

version: 2
jobs:
  checkout_code:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.5
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code
  install_dependencies:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2-node
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - run:
          name: Node install
          command: npm ci
      - save_cache:
          paths:
            - /home/circleci/code/node_modules/
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - save_cache:
          paths:
            - /home/circleci/code/.venv
          key: pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
  test_and_coverage:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - run:
          name: Run unit tests & check coverage
          command: |
            pipenv run coverage run --source='crt_portal' crt_portal/manage.py test --settings=crt_portal.test_settings cts_forms
            pipenv run coverage report --fail-under=85 -m
  bandit:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - run:
          name: Run bandit (Python security) tests
          command: |
            pipenv run bandit -r crt_portal/
  flake8:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - run:
          name: Run flake8 test for Python code style
          command: |
            pipenv run flake8
  prettier:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2-node
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Run prettier code formatting check
          command: npm run lint:check
  pa11y:
    working_directory: ~/code
    docker:
      - image: circleci/python:3.8.2-node-browsers
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Build frontend resources
          command: node node_modules/gulp/bin/gulp build-sass
      - run:
          name: migrate db for tests
          command: pipenv run crt_portal/manage.py migrate
      - run:
          name: run server for tests
          environment:
            DEBUG: true
          command: |
            # create pa11y_tester
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_user('pa11y_tester', 'admin@myproject.com', '$PA11Y_PASSWORD')" | pipenv run crt_portal/manage.py shell
            # runserver
            pipenv run crt_portal/manage.py runserver 8000
          background: true
      - run:
          name: Run pa11y-ci accessibility check
          command: |
            curl --retry-delay 5 --retry 10 --retry-connrefused http://127.0.0.1:8000
            npm run test:a11y
      - store_artifacts:
          path: ./pa11y-screenshots

# owasp scans on live sites
  owasp-scan-dev:
    machine:
      image: circleci/classic:latest
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-weekly zap-baseline.py \
              -t https://crt-portal-django-dev.app.cloud.gov/report/ -c .circleci/zap.conf -z "-config rules.cookie.ignorelist=django_language"
  owasp-scan-stage:
    machine:
      image: circleci/classic:latest
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-weekly zap-baseline.py \
              -t https://crt-portal-django-stage.app.cloud.gov/report/ -c .circleci/zap.conf -z "-config rules.cookie.ignorelist=django_language"
  owasp-scan-prod:
    machine:
      image: circleci/classic:latest
    working_directory: ~/code
    steps:
      - checkout
      - run:
            name: Pull owasp zap docker image and run scan
            command: |
              docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-weekly zap-baseline.py \
              -t https://civilrights.justice.gov/report/ -c .circleci/zap.conf -z "-config rules.cookie.ignorelist=django_language"
# deployments
  deploy-dev:
    <<: *CF_DOCKER_IMAGE
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Deploy to dev
          command: |
              ./blue-green-deploy.sh $CRT_USERNAME_DEV $CRT_PASSWORD_DEV dev

  deploy-stage:
    <<: *CF_DOCKER_IMAGE
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Deploy to stage
          command: |
            ./blue-green-deploy.sh $CRT_USERNAME_STAGE $CRT_PASSWORD_STAGE staging

  deploy-prod:
    <<: *CF_DOCKER_IMAGE
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Deploy to production
          command: |
            ./blue-green-deploy.sh $CRT_USERNAME_PROD $CRT_PASSWORD_PROD prod

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - checkout_code
      - install_dependencies:
          requires:
            - checkout_code
      - test_and_coverage:
          requires:
            - install_dependencies
      - bandit:
          requires:
            - install_dependencies
      - flake8:
          requires:
            - install_dependencies
      - prettier:
          requires:
            - install_dependencies
      - pa11y:
          requires:
            - install_dependencies

      - owasp-scan-dev:
          filters:
            branches:
              only: /^release.*/

      - owasp-scan-stage:
          filters:
            branches:
              only: master

      - owasp-scan-prod:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master

      - deploy-dev:
          requires:
            - test_and_coverage
            - bandit
            - flake8
            - prettier
            - pa11y
          filters:
            branches:
              only: develop

      - deploy-stage:
          requires:
            - owasp-scan-dev
            - test_and_coverage
            - bandit
            - flake8
            - prettier
            - pa11y
          filters:
            branches:
              only: /^release.*/

      - deploy-prod:
          requires:
            - owasp-scan-stage
            - test_and_coverage
            - bandit
            - flake8
            - prettier
            - pa11y
          filters:
            branches:
              only: master
