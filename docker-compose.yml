version: "3.7"

services:
  db:
    hostname: db
    build:
      dockerfile: db/db.Dockerfile
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  jupyter:
    hostname: jupyter
    platform: linux/amd64
    environment:
        # Format needed for Python connections:
      - DATABASE_URL=postgresql://${POSTGRES_ANALYTICS_USER}:${POSTGRES_ANALYTICS_PASSWORD}@db:${DATABASE_PORT:-5432}/postgres
        # Format needed for R connections:
      - DATABASE_HOSTNAME=db
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USER=${POSTGRES_ANALYTICS_USER}
      - DATABASE_PASSWORD=${POSTGRES_ANALYTICS_PASSWORD}
      - OAUTH_PROVIDER_CLIENT_ID=${OAUTH_PROVIDER_CLIENT_ID}
      - OAUTH_PROVIDER_CLIENT_SECRET=${OAUTH_PROVIDER_CLIENT_SECRET}
      - WEB_EXTERNAL_HOSTNAME=${WEB_EXTERNAL_HOSTNAME}
      - WEB_INTERNAL_HOSTNAME=${WEB_INTERNAL_HOSTNAME}
    build:
      dockerfile: jupyterhub.Dockerfile
    command: jupyterhub --config '/srv/jupyterhub/jupyterhub_config.py'
    depends_on:
      - db
      - web

  web:
    hostname: web
    platform: linux/amd64
    environment:
      - ENV=LOCAL
      - SECRET_KEY=${SECRET_KEY}
      - VOTING_MODE=${VOTING_MODE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_ANALYTICS_PASSWORD=${POSTGRES_ANALYTICS_PASSWORD}
      - POSTGRES_ANALYTICS_USER=${POSTGRES_ANALYTICS_USER}
      - TMS_AUTH_TOKEN=${TMS_AUTH_TOKEN}
      - TMS_WEBHOOK_ALLOWED_CIDR_NETS=${TMS_WEBHOOK_ALLOWED_CIDR_NETS}
      - RESTRICT_EMAIL_RECIPIENTS_TO=${RESTRICT_EMAIL_RECIPIENTS_TO}
      - FORM_AUTOCOMPLETE_OFF=False
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AV_SCAN_URL=http://clamav-rest:${CLAMAV_REST_PORT:-9000}/api/v1/scan
    build: .
    command: /code/run.sh
    depends_on:
      - db

  mailhog:
    hostname: mailhog
    image: mailhog/mailhog
    # command: -invite-jim=1 -jim-accept=0.50  # uncomment to enable and configure Jim (Chaos Monkey)

  clamd:
    image: clamav/clamav
    restart: unless-stopped
    ports:
      - 3310:3310

  clamav-rest:
    image: benzino77/clamav-rest-api
    restart: unless-stopped
    # depends_on is ignored in some situations (have a look at the discussion in this PR: https://github.com/benzino77/clamav-rest-api/pull/23)
    # to fix such situation there is wait-for-it script available inside the CRA docker image (https://github.com/vishnubob/wait-for-it)
    # so to wait for clamd to be available, one could ovewrite the CMD with wait-for-it script
    command: ['/usr/bin/wait-for-it', '-h', 'clamd', '-p', '3310', '-s', '-t', '60', '--', 'npm', 'start']
    depends_on:
      - clamd
    environment:
      - NODE_ENV=local
      - CLAMD_IP=clamd
      - APP_FORM_KEY=FILES
      - APP_PORT=9000
      - APP_MAX_FILE_SIZE=100000000
    ports:
      - '9000:9000'

volumes:
  postgres_data:
